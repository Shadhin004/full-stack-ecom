// <auto-generated />
using System;
using BlossomAvenue.Infrastrcture.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlossomAvenue.Infrastrcture.Migrations
{
    [DbContext(typeof(BlossomAvenueDbContext))]
    partial class BlossomAvenueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlossomAvenue.Core.Carts.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("pk_carts");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Carts.CartItem", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cart_items_id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("Variationid")
                        .HasColumnType("uuid")
                        .HasColumnName("variationid");

                    b.HasKey("CartItemsId")
                        .HasName("pk_cart_items");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_items_cart_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_cart_items_product_id");

                    b.HasIndex("Variationid")
                        .HasDatabaseName("ix_cart_items_variationid");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Orders.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("pk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_items_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("VariationId")
                        .HasColumnType("uuid")
                        .HasColumnName("variation_id");

                    b.HasKey("OrderItemsId")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("VariationId")
                        .HasDatabaseName("ix_order_items_variation_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.ProductReviews.ProductReview", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.Property<int?>("Star")
                        .HasColumnType("integer")
                        .HasColumnName("star");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("pk_product_reviews");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_product_reviews_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_product_reviews_user_id");

                    b.ToTable("product_reviews", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("ImageId")
                        .HasName("pk_images");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_images_product_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("ProductId")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_category_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("ProductCategoryId")
                        .HasName("pk_product_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_categories_category_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_categories_product_id");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Variation", b =>
                {
                    b.Property<Guid>("VariationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("variation_id");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer")
                        .HasColumnName("inventory");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("VariationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("variation_name");

                    b.HasKey("VariationId")
                        .HasName("pk_variations");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_variations_product_id");

                    b.ToTable("variations", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.AddressDetail", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address_line_2");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.HasKey("AddressId")
                        .HasName("address_details_pkey");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_address_details_city_id");

                    b.ToTable("address_details", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("city_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city_name");

                    b.HasKey("CityId")
                        .HasName("cities_pkey");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsUserActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_user_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserAddress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<bool?>("DefaultAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("default_address");

                    b.HasKey("UserId", "AddressId")
                        .HasName("user_addresses_pkey");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_user_addresses_address_id");

                    b.ToTable("user_addresses", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserContactNumber", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("contact_number");

                    b.HasKey("UserId", "ContactNumber")
                        .HasName("user_contact_number_pkey");

                    b.ToTable("user_contact_number", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserCredential", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("user_credentials_pk");

                    b.ToTable("user_credentials", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("user_role_name");

                    b.HasKey("UserRoleId")
                        .HasName("user_roles_pkey");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("BlossomAvenue.Core.Carts.CartItem", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Carts.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("BlossomAvenue.Core.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_products_product_id");

                    b.HasOne("BlossomAvenue.Core.Products.Variation", "Variation")
                        .WithMany()
                        .HasForeignKey("Variationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_variations_variationid");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Orders.OrderItem", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("BlossomAvenue.Core.Products.Variation", "Variation")
                        .WithMany()
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_variations_variation_id");

                    b.Navigation("Order");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("BlossomAvenue.Core.ProductReviews.ProductReview", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Orders.Order", "Order")
                        .WithMany("ProductReviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_orders_order_id");

                    b.HasOne("BlossomAvenue.Core.Products.Product", null)
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_products_product_id");

                    b.HasOne("BlossomAvenue.Core.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_reviews_users_user_id");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Image", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Products.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_products_product_id");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.ProductCategory", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_categories_categories_category_id");

                    b.HasOne("BlossomAvenue.Core.Products.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_categories_products_product_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Variation", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Products.Product", null)
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_variations_products_product_id");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.AddressDetail", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Users.City", "City")
                        .WithMany("AddressDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("address_details_city_id_fkey");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.User", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Users.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("users_user_role_id_fkey");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserAddress", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Users.AddressDetail", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_addresses_address_id_fkey");

                    b.HasOne("BlossomAvenue.Core.Users.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_addresses_user_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserContactNumber", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Users.User", "User")
                        .WithMany("UserContactNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_contact_number_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserCredential", b =>
                {
                    b.HasOne("BlossomAvenue.Core.Users.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("BlossomAvenue.Core.Users.UserCredential", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_credentials_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Carts.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Products.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductReviews");

                    b.Navigation("Variations");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.AddressDetail", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.City", b =>
                {
                    b.Navigation("AddressDetails");
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.User", b =>
                {
                    b.Navigation("UserAddresses");

                    b.Navigation("UserContactNumbers");

                    b.Navigation("UserCredential")
                        .IsRequired();
                });

            modelBuilder.Entity("BlossomAvenue.Core.Users.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
